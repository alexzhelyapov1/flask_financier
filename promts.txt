Напиши на python, используя SQLite, API для работы с базой данных для приложения. Это API должно предоставлять необходимые функции и проверки для работы с базой данных, и полностью отделять работу с базой данных от остального приложения.
База данных должна содержать следующие таблицы:
1) Таблица Users.
Поля:
    - user_id - уникальный id пользователя
    - admin - является ли пользователь администратором
    - login - уникальный логин
    - password - храним пароль в кэшированном виде
    - friends - список id других пользователей
    - description - дополнительная информация, просто текст
В таблицы Users все поля являются обязательными, кроме description. 

2) Таблица Spheres.
Поля:
    - sphere_id - уникальный id сферы
    - name
    - description
    - user_id - id владельца записи
    - user_read_ids - id пользователей, которые могут видеть эту запись
    - user_edit_ids - id пользователей, которые могут менять или удалять эту запись
В таблицы Spheres все поля являются обязательными, кроме description.

3) Таблица Locations.
Поля:
    - location_id - уникальный id локации (например банка или счета)
    - name
    - description
    - user_id - id владельца записи
    - user_read_ids - id пользователей, которые могут видеть эту запись
    - user_edit_ids - id пользователей, которые могут менять или удалять эту запись
В таблицы Locations все поля являются обязательными, кроме description.

4) Таблица Accounting.
Поля:
    - accounting_id - id события. Может повторяться только если тип операции is_transfer.
    - user_id - id владельца записи
    - user_read_ids - id пользователей, которые могут видеть эту запись
    - user_edit_ids - id пользователей, которые могут менять или удалять эту запись
    - operation_type - тип операции, может принимать одно из трех значений: "Income", "Spend". Может быть объявлено численными константами для лучшей скорости.
    - is_transfer - bool, является ли эта операция частью transfer
    - sphere_id
    - location_id
    - sum - сумма в рублях, может быть нецелым
    - description
    - date
В таблице Accounting обязательными являются accounting_id, operation_type, location_id, sum, date. Date должна автоматом выставляться текущей датой-временем, если не передается в API.

Код должен быть защищен от sql инъекций. Операция перевода (transfer) реализуется как 2 операции: Spend + Income. Существуют transfer между сферами или между локациями. Реализуй необходимую логику проверок в API базы данных.

Какие проверки должны быть реализованы:
1) Администратор видит и может все.
2) Добавлять пользователей может только система или администратор.
3) Владелец записи может делать с записью все.
4) Владелец записи может добавить только своих друзей в поля user_read_ids, user_edit_ids.
5) Если приходит тип операции transfer (из одной сферы в другую, либо из одной локации в другую) система создает в таблице 2 записи в одной таблице Accounting с одинаковым accounting_id, но одна операция Spend, другая Income. Это единственный сценарий в котором допустимо, что одно из sphere_id или location_id может быть пустым. В остальных случаях они всегда не пусты.
6) Дата сохраняется полностью, включая время. Если дата не передается в API, устанавливается значение now() (GMT+3)
7) Обычные события Spend или Income добавляются в таблицу Accounting с уникальным accounting_id.

Это должен быть 1 файл db_api.py. Позже мы сделаем отдельный файл для заполнения таблицы тестовыми примерам, сейчас это не надо. В API должно сейчас присутствовать создание таблиц, создание, изменение и удаление записей для каждой таблицы. Тумаю функционал и целевое использование тебе в целом понятно. Реализуй этот код и пришли мне. Может добавлять короткие описания у функций, но короткие, не надо писать полноценную документацию.




---


Отлично, теперь напиши для этого приложения простой фронтенд используя python Flask. Какие формы должны присутствовать:
1) Главная страница титульник. Просто с текстом что это система для финансового учета. В углу вход\регистрация.
2) Стандартная форма входа и регистрации. После входа пользователь при попытке обращения к базе данных всегда скрыто отправляет свой id.
3) Для пользователя должны быть формы для редактирования и добавления сфер\локаций.
4) Должна быть форма для просмотра хронологии по сферам, а также другая по локациям.
5) Должна быть кнопка добавления новой записи с вариантами Income, Spend, Transfer. Пользователь не должен видеть, что Transfer реализуется как Income + Spend.
6) Должна быть страница, на которой общая сводка: общая сумма денег и цветной график распределения общей суммы по сферам и по локациям с подписями суммы и в скобочках процента от общей суммы.
7) Администратор должен иметь полный доступ, он может выбрать ID пользователя и просмотреть\редактировать всю информацию по нему, как и сам пользователь. Т.е. администратор просто выбирает пользователя и видит то же самое, что и сам пользователь.